/**
 * @file hal_entry.c
 * @brief SHRAVYA Real Hardware Entry Point - Pin A4 DRDY - TRON 2025
 * @version 8.1 - FSP COMPATIBLE
 * @date 2025-09-20
 */

#include "hal_data.h"
#include "shravyaCONFIG.h"
#include "eegTYPES.h"
#include "semaphoresGLOBAL.h"
#include <stdio.h>

/* ✅ μT-Kernel 3.0 Type System */
#ifndef INT
typedef int INT;
#endif

#ifndef ER
typedef int ER;
#endif

#ifndef ID
typedef int ID;
#endif

#ifndef E_OK
#define E_OK (0)
#endif

#ifndef E_SYS
#define E_SYS (-5)
#endif

#ifndef TA_HLNG
#define TA_HLNG (0x00000001U)
#endif

#ifndef TA_RNG3
#define TA_RNG3 (0x00000300U)
#endif

/* μT-Kernel Task Structure */
typedef struct {
    uint32_t tskatr;
    void *task;
    int itskpri;
    uint32_t stksz;
    void *stkadr;
} T_CTSK;

extern void initialise_monitor_handles(void);

/* ✅ EXTERNAL DECLARATIONS - Your existing task functions */
extern void task_eeg_acquisition_entry(INT stacd, void *exinf);
extern void task_signal_processing_entry(INT stacd, void *exinf);
extern void task_feature_extraction_entry(INT stacd, void *exinf);
extern void task_classification_entry(INT stacd, void *exinf);
extern void task_haptic_feedback_entry(INT stacd, void *exinf);
extern void task_communication_entry(INT stacd, void *exinf);
extern void task_shravya_main_entry(INT stacd, void *exinf);

/* ✅ EXTERNAL HARDWARE FUNCTION DECLARATIONS */
extern fsp_err_t eeg_acquisition_init(void);
extern fsp_err_t haptic_feedback_init(void);
extern fsp_err_t communication_init(void);
extern fsp_err_t power_management_init(void);

/* μT-Kernel Function Prototypes */
extern ER tk_ini_ker(void);
extern ER tk_ext_ker(void);
extern ID tk_cre_tsk(T_CTSK *pk_ctsk);
extern ER tk_sta_tsk(ID tskid, INT stacd);
extern ER initialize_global_semaphores(void);
extern ER tk_sig_sem(ID semid, INT cnt);

/* ✅ GLOBAL DRDY FLAG - Pin A4 monitoring */
static volatile bool drdy_signal_received = false;
static volatile uint32_t drdy_count = 0;

/* ✅ SIMPLIFIED DRDY INTERRUPT HANDLER - Compatible with any IRQ */
void ads1263_drdy_callback(external_irq_callback_args_t *p_args)
{
    (void)p_args;

    drdy_signal_received = true;
    drdy_count++;

    /* Signal EEG acquisition task that new data is ready */
    tk_sig_sem(eeg_data_semaphore, 1);
}

/* ✅ MANUAL EEG TRIGGER TASK - Fallback for when hardware interrupt not available */
void manual_eeg_trigger_task(INT stacd, void *exinf)
{
    (void)stacd;
    (void)exinf;

    printf("SHRAVYA: Manual EEG trigger active - 500Hz sampling fallback\r\n");

    uint32_t trigger_count = 0;

    while (1) {
        /* Check if we're getting real DRDY signals */
        if (drdy_signal_received) {
            /* Real hardware is working - this task can slow down */
            tk_dly_tsk(100);  // Check every 100ms
        } else {
            /* No hardware signals - provide manual trigger */
            tk_sig_sem(eeg_data_semaphore, 1);
            trigger_count++;

            /* Status update every 2500 triggers (5 seconds at 500Hz) */
            if (trigger_count % 2500 == 0) {
                printf("SHRAVYA: Manual trigger active - %lu samples generated\r\n", trigger_count);
            }

            /* 2ms delay for 500Hz rate */
            tk_dly_tsk(2);
        }
    }
}

/**
 * @brief Configure Pin A4 GPIO monitoring for DRDY (without FSP IRQ config)
 */
static fsp_err_t configure_pin_a4_monitoring(void)
{
    fsp_err_t err = FSP_SUCCESS;

    printf("SHRAVYA: Configuring Pin A4 (AN04) for DRDY monitoring...\r\n");

    /* Configure Pin A4 as digital input */
    err = R_IOPORT_PinCfg(&g_ioport_ctrl, BSP_IO_PORT_00_PIN_04,
                          IOPORT_CFG_PORT_DIRECTION_INPUT | IOPORT_CFG_PULLUP_ENABLE);

    if (err != FSP_SUCCESS) {
        printf("SHRAVYA: Pin A4 GPIO config failed: %u\r\n", err);
        return err;
    }

    printf("SHRAVYA: Pin A4 configured as input with pullup\r\n");

    /* Try to configure external interrupt if available */
    #ifdef g_external_irq0_ctrl
    printf("SHRAVYA: Attempting to configure external interrupt...\r\n");

    external_irq_cfg_t irq_cfg = {
        .channel = 0,  // Use IRQ0 if available
        .trigger = EXTERNAL_IRQ_TRIG_FALLING,
        .filter_enable = true,
        .clock_source_div = EXTERNAL_IRQ_CLOCK_SOURCE_DIV_8,  // ✅ CORRECTED
        .p_callback = ads1263_drdy_callback,
        .p_context = NULL,
        .p_extend = NULL,
        .ipl = 12,
    };

    err = R_ICU_ExternalIrqOpen(&g_external_irq0_ctrl, &irq_cfg);
    if (err == FSP_SUCCESS) {
        err = R_ICU_ExternalIrqEnable(&g_external_irq0_ctrl);
        if (err == FSP_SUCCESS) {
            printf("SHRAVYA: External interrupt enabled for DRDY\r\n");
        } else {
            printf("SHRAVYA: External interrupt enable failed: %u\r\n", err);
        }
    } else {
        printf("SHRAVYA: External interrupt config failed: %u\r\n", err);
    }
    #else
    printf("SHRAVYA: No external IRQ configured in FSP - using manual trigger\r\n");
    #endif

    return FSP_SUCCESS;  // Always succeed - we have fallback
}

/**
 * @brief Initialize SHRAVYA REAL Hardware - ROBUST VERSION
 */
static int shravya_hardware_init(void)
{
    fsp_err_t err = FSP_SUCCESS;

    printf("SHRAVYA: Initializing REAL hardware subsystems...\r\n");

    /* 1. Initialize SPI for ADS1263 communication (if available) */
    printf("SHRAVYA: Initializing SPI for EEG ADC...\r\n");
    #ifdef g_spi0_ctrl
    err = R_SPI_B_Open(&g_spi0_ctrl, &g_spi0_cfg);
    if (err != FSP_SUCCESS) {
        printf("SHRAVYA: SPI init failed: %u - continuing with simulation\r\n", err);
    } else {
        printf("SHRAVYA: SPI interface ready\r\n");
    }
    #else
    printf("SHRAVYA: No SPI configured in FSP - will use simulation mode\r\n");
    #endif

    /* 2. Initialize EEG Acquisition Hardware */
    printf("SHRAVYA: Initializing EEG acquisition (ADS1263)...\r\n");
    err = eeg_acquisition_init();
    if (err != FSP_SUCCESS) {
        printf("SHRAVYA: EEG hardware init failed: %u - will adapt to simulation\r\n", err);
    } else {
        printf("SHRAVYA: ADS1263 EEG ADC initialized successfully\r\n");
    }

    /* 3. Configure Pin A4 DRDY monitoring */
    printf("SHRAVYA: Setting up Pin A4 DRDY monitoring...\r\n");
    err = configure_pin_a4_monitoring();
    if (err != FSP_SUCCESS) {
        printf("SHRAVYA: Pin A4 setup warning: %u - using manual trigger fallback\r\n", err);
    } else {
        printf("SHRAVYA: Pin A4 DRDY monitoring ready\r\n");
    }

    /* 4. Initialize Haptic Feedback System */
    printf("SHRAVYA: Initializing haptic feedback system...\r\n");
    err = haptic_feedback_init();
    if (err != FSP_SUCCESS) {
        printf("SHRAVYA: Haptic init warning: %u - continuing\r\n", err);
    } else {
        printf("SHRAVYA: Haptic feedback system ready\r\n");
    }

    /* 5. Initialize Communication System */
    printf("SHRAVYA: Initializing N8N communication...\r\n");
    err = communication_init();
    if (err != FSP_SUCCESS) {
        printf("SHRAVYA: Communication init warning: %u - continuing\r\n", err);
    } else {
        printf("SHRAVYA: N8N communication ready\r\n");
    }

    /* 6. Initialize Power Management */
    printf("SHRAVYA: Initializing power management...\r\n");
    err = power_management_init();
    if (err != FSP_SUCCESS) {
        printf("SHRAVYA: Power management warning: %u - continuing\r\n", err);
    } else {
        printf("SHRAVYA: Power management ready\r\n");
    }

    printf("SHRAVYA: Hardware initialization complete - system ready!\r\n");
    printf("SHRAVYA: Pin A4 monitoring DRDY or using manual trigger\r\n");
    return 0; // Always succeed
}

/**
 * @brief Create and start μT-Kernel tasks - ROBUST VERSION
 */
static ER create_shravya_tasks(void)
{
    T_CTSK ctsk;
    ER ercd;
    ID task_id;

    printf("SHRAVYA: Creating SHRAVYA tasks...\r\n");

    /* ✅ Task 0: Manual EEG Trigger (Highest Priority - Fallback) */
    ctsk.tskatr = TA_HLNG | TA_RNG3;
    ctsk.task = (void*)manual_eeg_trigger_task;
    ctsk.itskpri = 8;   // Higher than EEG task
    ctsk.stksz = 1024;
    ctsk.stkadr = NULL;

    task_id = tk_cre_tsk(&ctsk);
    if (task_id > 0) {
        ercd = tk_sta_tsk(task_id, 0);
        if (ercd == E_OK) {
            printf("SHRAVYA: Manual EEG trigger task started\r\n");
        }
    }

    /* ✅ Task 1: EEG Acquisition Task */
    ctsk.tskatr = TA_HLNG | TA_RNG3;
    ctsk.task = (void*)task_eeg_acquisition_entry;  // ← YOUR EXISTING FUNCTION
    ctsk.itskpri = 10;
    ctsk.stksz = 2048;
    ctsk.stkadr = NULL;

    task_id = tk_cre_tsk(&ctsk);
    if (task_id <= 0) return E_SYS;

    ercd = tk_sta_tsk(task_id, 0);
    if (ercd != E_OK) return ercd;

    /* ✅ Task 2: Signal Processing Task */
    ctsk.task = (void*)task_signal_processing_entry;  // ← YOUR EXISTING FUNCTION
    ctsk.itskpri = 15;

    task_id = tk_cre_tsk(&ctsk);
    if (task_id <= 0) return E_SYS;

    ercd = tk_sta_tsk(task_id, 0);
    if (ercd != E_OK) return ercd;

    /* ✅ Task 3: Feature Extraction Task */
    ctsk.task = (void*)task_feature_extraction_entry;  // ← YOUR EXISTING FUNCTION
    ctsk.itskpri = 20;
    ctsk.stksz = 1024;

    task_id = tk_cre_tsk(&ctsk);
    if (task_id <= 0) return E_SYS;

    ercd = tk_sta_tsk(task_id, 0);
    if (ercd != E_OK) return ercd;

    /* ✅ Task 4: Classification Task */
    ctsk.task = (void*)task_classification_entry;  // ← YOUR EXISTING FUNCTION
    ctsk.itskpri = 25;
    ctsk.stksz = 2048;

    task_id = tk_cre_tsk(&ctsk);
    if (task_id <= 0) return E_SYS;

    ercd = tk_sta_tsk(task_id, 0);
    if (ercd != E_OK) return ercd;

    /* ✅ Task 5: Haptic Feedback Task */
    ctsk.task = (void*)task_haptic_feedback_entry;  // ← YOUR EXISTING FUNCTION
    ctsk.itskpri = 30;
    ctsk.stksz = 1024;

    task_id = tk_cre_tsk(&ctsk);
    if (task_id <= 0) return E_SYS;

    ercd = tk_sta_tsk(task_id, 0);
    if (ercd != E_OK) return ercd;

    /* ✅ Task 6: Communication Task */
    ctsk.task = (void*)task_communication_entry;  // ← YOUR EXISTING FUNCTION
    ctsk.itskpri = 35;
    ctsk.stksz = 1024;

    task_id = tk_cre_tsk(&ctsk);
    if (task_id <= 0) return E_SYS;

    ercd = tk_sta_tsk(task_id, 0);
    if (ercd != E_OK) return ercd;

    /* ✅ Task 7: Main Coordinator Task */
    ctsk.task = (void*)task_shravya_main_entry;  // ← YOUR EXISTING FUNCTION
    ctsk.itskpri = 5;
    ctsk.stksz = 1024;

    task_id = tk_cre_tsk(&ctsk);
    if (task_id <= 0) return E_SYS;

    ercd = tk_sta_tsk(task_id, 0);
    if (ercd != E_OK) return ercd;

    printf("SHRAVYA: All 8 tasks created and started successfully\r\n");
    return E_OK;
}

/**
 * @brief SHRAVYA Main Entry Point - TRON Contest 2025
 */
void hal_entry(void)
{
    /* ✅ CRITICAL: Initialize semi-hosting FIRST - ENABLES CONSOLE OUTPUT */
    initialise_monitor_handles();

    ER ercd;

    printf("SHRAVYA: System starting - TRON Contest 2025\r\n");
    printf("SHRAVYA: hal_entry() called - real hardware mode with fallbacks!\r\n");

    /* FSP Hardware Initialization */
    #if BSP_TZ_SECURE_BUILD
    R_BSP_NonSecureEnter();
    #endif

    /* Initialize SHRAVYA Hardware Subsystems - Robust version */
    printf("SHRAVYA: Starting robust hardware initialization...\r\n");
    if (shravya_hardware_init() != 0) {
        printf("SHRAVYA: Hardware initialization completed with warnings\r\n");
    }

    /* Initialize μT-Kernel 3.0 */
    printf("SHRAVYA: Initializing μT-Kernel 3.0...\r\n");
    ercd = tk_ini_ker();
    if (ercd != E_OK) {
        printf("SHRAVYA: Kernel initialization failed (error %d)\r\n", ercd);
        while(1) {
            __NOP();
        }
    }

    /* Create Global Semaphores for Task Coordination */
    printf("SHRAVYA: Creating global semaphores...\r\n");
    ercd = initialize_global_semaphores();
    if (ercd != E_OK) {
        printf("SHRAVYA: Semaphore creation failed (error %d)\r\n", ercd);
        while(1) {
            __NOP();
        }
    }

    /* Create and Start All SHRAVYA Tasks */
    printf("SHRAVYA: Creating all SHRAVYA tasks...\r\n");
    ercd = create_shravya_tasks();
    if (ercd != E_OK) {
        printf("SHRAVYA: Task creation failed (error %d)\r\n", ercd);
        while(1) {
            __NOP();
        }
    }

    printf("SHRAVYA: Starting μT-Kernel scheduler - EEG monitoring active!\r\n");
    printf("SHRAVYA: System will use Pin A4 DRDY or manual trigger as needed\r\n");

    /* Start μT-Kernel 3.0 Scheduler - This should never return */
    tk_ext_ker();

    /* Should never reach here - system error */
    printf("SHRAVYA: CRITICAL ERROR - Scheduler returned!\r\n");
    while(1) {
        __NOP();
    }
}

/**
 * @brief FSP Warm Start Handler
 */
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event) {
        #if BSP_FEATURE_FLASH_LP_VERSION != 0
        R_FACI_LP->DFLCTL = 1U;
        #endif
    }

    if (BSP_WARM_START_POST_C == event) {
        R_IOPORT_Open(&IOPORT_CFG_CTRL, &IOPORT_CFG_NAME);
        #if BSP_CFG_SDRAM_ENABLED
        R_BSP_SdramInit(true);
        #endif
    }
}
