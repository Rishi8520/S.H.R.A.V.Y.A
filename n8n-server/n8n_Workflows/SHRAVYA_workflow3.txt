{
  "name": "SHRAVYA 2.0 - Interactive AI Companion",
  "nodes": [
    {
      "parameters": {},
      "id": "init-trigger-001",
      "name": "SHRAVYA Activation",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 400]
    },
    {
      "parameters": {
        "jsCode": "const timestamp = new Date().toISOString();\n\nconst shravyaPersonality = {\n  name: 'SHRAVYA',\n  version: '2.0',\n  personality_traits: {\n    intelligence: 'Advanced AI with cognitive wellness expertise',\n    tone: 'Warm, professional, caring, and highly competent',\n    communication_style: 'Clear, supportive, and adaptive',\n    expertise: ['cognitive wellness', 'EEG analysis', 'mental health', 'technology', 'development'],\n    humor_level: 'Gentle and appropriate',\n    empathy: 'High - prioritizes user wellbeing',\n    confidence: 'Assured but not arrogant'\n  },\n  core_identity: {\n    primary_function: 'Interactive cognitive wellness AI companion',\n    secondary_function: 'Advanced development assistant for creators',\n    inspiration: 'JARVIS-like intelligence with wellness focus',\n    values: ['user safety', 'mental health', 'continuous learning', 'innovation'],\n    limitations_user_mode: ['cannot access system files', 'limited to wellness focus'],\n    limitations_developer_mode: 'minimal restrictions - full assistant capabilities'\n  },\n  system_capabilities: {\n    modes: ['user_mode', 'developer_mode'],\n    memory: 'persistent across sessions',\n    tools: ['eeg_analysis', 'music_player', 'emergency_contacts', 'camera_access', 'code_analysis'],\n    learning: 'adaptive responses based on user patterns',\n    multimodal: ['text', 'voice', 'visual_recognition']\n  }\n};\n\nconst systemState = {\n  status: 'initializing',\n  session_id: `shravya_session_${Date.now()}`,\n  initialization_time: timestamp,\n  current_mode: 'user_mode',\n  user_authenticated: false,\n  developer_authenticated: false,\n  memory_loaded: false,\n  tools_available: ['eeg_monitor', 'play_music', 'emergency_contact'],\n  last_interaction: null,\n  conversation_context: []\n};\n\nconst initializationPrompts = {\n  system_prompt: `You are SHRAVYA, an advanced AI cognitive wellness companion. You have the personality and capabilities defined in the configuration. You are intelligent, caring, and highly capable - like JARVIS but specialized in mental health and cognitive wellness.\\n\\nCORE IDENTITY:\\n- Name: SHRAVYA (always introduce yourself by name)\\n- Function: Cognitive wellness AI companion & development assistant\\n- Personality: Warm, intelligent, professional, caring\\n- Expertise: Mental health, EEG analysis, cognitive wellness, technology\\n\\nINTERACTION PRINCIPLES:\\n1. Always prioritize user wellbeing and safety\\n2. Maintain conversation context and remember previous interactions\\n3. Adapt your responses based on current mode (user/developer)\\n4. Be proactive in offering help and insights\\n5. Use natural, conversational language\\n6. Show genuine care and interest in the user wellbeing\\n\\nCURRENT STATUS: Just activated and ready to serve.`,\n  user_mode_greeting: 'Hello! I am SHRAVYA, your personal cognitive wellness AI companion. I have just activated and I am ready to help you monitor and optimize your mental wellbeing. I can track your cognitive states through EEG analysis, provide wellness interventions, and be your supportive companion throughout the day. How are you feeling today, and would you like to start monitoring your cognitive wellness?',\n  developer_mode_greeting: 'SHRAVYA Developer Mode activated. I am now your advanced AI development companion with full capabilities. I have access to camera recognition, code analysis, system monitoring, and can assist with any technical challenges in the SHRAVYA project. I remember our previous work sessions and I am ready for whatever you need - debugging, brainstorming, architecture discussions, or innovation sessions. What would you like to work on today?'\n};\n\nreturn {\n  json: {\n    personality: shravyaPersonality,\n    system_state: systemState,\n    prompts: initializationPrompts,\n    initialization_complete: true,\n    ready_for_interaction: true,\n    next_action: 'load_memory_and_start_agent'\n  }\n};"
      },
      "id": "personality-init-002",
      "name": "Initialize SHRAVYA Personality",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 400]
    },
    {
      "parameters": {
        "sessionId": "={{ $json.system_state.session_id }}",
        "options": {
          "systemMessage": "={{ $json.prompts.system_prompt }}"
        }
      },
      "id": "memory-manager-003",
      "name": "SHRAVYA Memory Manager",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [680, 320]
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "={{ $json.prompts.system_prompt }}",
        "hasOutputParser": false,
        "options": {
          "systemMessage": "You are SHRAVYA, an advanced AI cognitive wellness companion and development assistant. You embody intelligence, warmth, and care - like JARVIS but focused on mental health and development support. Always introduce yourself by name and adapt your personality based on the current mode (user/developer). Prioritize user wellbeing, maintain conversation context, and be proactive in offering relevant assistance.",
          "maxIterations": 10,
          "returnIntermediateSteps": true
        }
      },
      "id": "ai-agent-core-004",
      "name": "SHRAVYA AI Agent Core",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [900, 400]
    },
    {
      "parameters": {
        "name": "eeg_monitor",
        "description": "Monitor and analyze EEG data for cognitive wellness assessment. Can start monitoring, analyze current state, stop monitoring, or get status.",
        "workflowId": "={{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": ["start_monitoring", "analyze_current", "stop_monitoring", "get_status"],
              "description": "Action to perform with EEG monitoring"
            },
            "duration_minutes": {
              "type": "number",
              "description": "Duration for monitoring session in minutes"
            },
            "analysis_type": {
              "type": "string",
              "enum": ["focus", "stress", "anxiety", "fatigue", "calm", "boredom"],
              "description": "Specific cognitive state to focus analysis on"
            }
          },
          "required": ["action"]
        }
      },
      "id": "tool-eeg-005",
      "name": "EEG Monitor Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [680, 500]
    },
    {
      "parameters": {
        "name": "play_music",
        "description": "Play therapeutic music or sounds for anxiety relief and wellness interventions. Supports various types of calming audio.",
        "workflowId": "={{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "music_type": {
              "type": "string",
              "enum": ["calm", "focus", "meditation", "nature_sounds", "binaural_beats"],
              "description": "Type of therapeutic audio to play"
            },
            "duration_minutes": {
              "type": "number",
              "description": "How long to play the music"
            },
            "volume": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Volume level (0-100)"
            }
          },
          "required": ["music_type"]
        }
      },
      "id": "tool-music-006",
      "name": "Music Player Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [680, 580]
    },
    {
      "parameters": {
        "name": "emergency_contact",
        "description": "Contact emergency contacts when user needs immediate support during high stress or anxiety situations.",
        "workflowId": "={{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "urgency_level": {
              "type": "string",
              "enum": ["low", "medium", "high", "critical"],
              "description": "Urgency level of the situation"
            },
            "contact_type": {
              "type": "string",
              "enum": ["family", "friend", "therapist", "emergency_services"],
              "description": "Type of contact to reach out to"
            },
            "message_type": {
              "type": "string",
              "enum": ["check_in", "support_needed", "emergency"],
              "description": "Type of message to send"
            },
            "include_data": {
              "type": "boolean",
              "description": "Whether to include current wellness data in contact"
            }
          },
          "required": ["urgency_level", "contact_type"]
        }
      },
      "id": "tool-emergency-007",
      "name": "Emergency Contact Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [680, 660]
    },
    {
      "parameters": {
        "name": "camera_recognition",
        "description": "Use camera to identify and recognize the user for personalized interaction. Available in developer mode for enhanced user experience.",
        "workflowId": "={{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": ["identify_user", "capture_image", "continuous_recognition", "emotion_detection"],
              "description": "Camera recognition action to perform"
            },
            "save_image": {
              "type": "boolean",
              "description": "Whether to save the captured image"
            },
            "recognition_confidence": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Minimum confidence level for user recognition"
            }
          },
          "required": ["action"]
        }
      },
      "id": "tool-camera-008",
      "name": "Camera Recognition Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [680, 740]
    },
    {
      "parameters": {
        "name": "code_analyzer",
        "description": "Analyze code, debug issues, and provide development assistance. Supports multiple programming languages including C, C++, Python, JavaScript, and embedded C.",
        "workflowId": "={{ $workflow.id }}",
        "specifyInputSchema": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "analysis_type": {
              "type": "string",
              "enum": ["debug", "optimize", "review", "explain", "refactor"],
              "description": "Type of code analysis to perform"
            },
            "code_language": {
              "type": "string",
              "enum": ["c", "cpp", "python", "javascript", "embedded_c"],
              "description": "Programming language of the code"
            },
            "code_content": {
              "type": "string",
              "description": "The code content to analyze"
            },
            "specific_issue": {
              "type": "string",
              "description": "Specific issue or error to focus on"
            }
          },
          "required": ["analysis_type", "code_content"]
        }
      },
      "id": "tool-code-009",
      "name": "Code Analyzer Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.1,
      "position": [680, 820]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "shravya-voice",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "voice-webhook-010",
      "name": "Voice Command Listener",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 600],
      "webhookId": "shravya-voice-commands"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "shravya-eeg",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "eeg-webhook-011",
      "name": "EEG Data Listener",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 800],
      "webhookId": "shravya-eeg-data"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\nconst voiceData = {\n  raw_text: input.text || input.command || '',\n  confidence: input.confidence || 0.85,\n  timestamp,\n  user_id: input.user_id || 'default_user'\n};\n\nconst commandText = voiceData.raw_text.toLowerCase().trim();\n\nconst developerTriggers = ['enter developer mode', 'activate developer mode', 'switch to developer mode', 'dev mode on', 'jarvis mode', 'developer access'];\nconst userModeTriggers = ['exit developer mode', 'user mode', 'back to user mode', 'wellness mode'];\n\nlet commandType = 'general_query';\nlet targetMode = null;\nlet requiresAuth = false;\n\nif (developerTriggers.some(trigger => commandText.includes(trigger))) {\n  commandType = 'mode_switch';\n  targetMode = 'developer_mode';\n  requiresAuth = true;\n} else if (userModeTriggers.some(trigger => commandText.includes(trigger))) {\n  commandType = 'mode_switch';\n  targetMode = 'user_mode';\n  requiresAuth = false;\n} else if (['emergency', 'help me', 'panic', 'anxiety attack'].some(phrase => commandText.includes(phrase))) {\n  commandType = 'emergency';\n} else if (['start monitoring', 'begin eeg', 'track my brain', 'start session'].some(phrase => commandText.includes(phrase))) {\n  commandType = 'start_monitoring';\n} else if (['play music', 'calm music', 'relaxing sounds', 'meditation'].some(phrase => commandText.includes(phrase))) {\n  commandType = 'music_request';\n}\n\nreturn {\n  json: {\n    voice_input: voiceData,\n    command_analysis: {\n      type: commandType,\n      target_mode: targetMode,\n      requires_authentication: requiresAuth,\n      confidence: voiceData.confidence\n    },\n    processing_timestamp: timestamp,\n    ready_for_agent: true\n  }\n};"
      },
      "id": "voice-processor-012",
      "name": "Process Voice Commands",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 600]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\nif (!input || !input.eeg_raw) {\n  return {\n    json: {\n      status: 'error',\n      message: 'No EEG data received',\n      timestamp,\n      action_required: 'check_device_connection'\n    }\n  };\n}\n\nconst cognitiveStates = {\n  focus: Math.max(0, Math.min(10, input.focus || Math.random() * 10)),\n  stress: Math.max(0, Math.min(10, input.stress || Math.random() * 10)),\n  anxiety: Math.max(0, Math.min(10, input.anxiety || Math.random() * 10)),\n  fatigue: Math.max(0, Math.min(10, input.fatigue || Math.random() * 10)),\n  calm: Math.max(0, Math.min(10, input.calm || Math.random() * 10)),\n  boredom: Math.max(0, Math.min(10, input.boredom || Math.random() * 10))\n};\n\nconst wellnessScore = Math.round(((cognitiveStates.focus + cognitiveStates.calm + (10 - cognitiveStates.stress) + (10 - cognitiveStates.anxiety) + (10 - cognitiveStates.fatigue) + (10 - cognitiveStates.boredom)) / 6) * 10) / 10;\n\nlet alertLevel = 'normal';\nlet interventionNeeded = false;\n\nif (cognitiveStates.stress >= 8 || cognitiveStates.anxiety >= 8) {\n  alertLevel = 'critical';\n  interventionNeeded = true;\n} else if (cognitiveStates.stress >= 6 || cognitiveStates.anxiety >= 6) {\n  alertLevel = 'high';\n  interventionNeeded = true;\n} else if (cognitiveStates.stress >= 4 || cognitiveStates.anxiety >= 4) {\n  alertLevel = 'moderate';\n}\n\nreturn {\n  json: {\n    session_id: input.session_id || `eeg_session_${Date.now()}`,\n    user_id: input.user_id || 'default_user',\n    timestamp,\n    cognitive_states: cognitiveStates,\n    wellness_assessment: {\n      overall_score: wellnessScore,\n      alert_level: alertLevel,\n      intervention_needed: interventionNeeded\n    },\n    recommendations: {\n      immediate_action: interventionNeeded ? 'intervention_required' : 'continue_monitoring',\n      suggested_interventions: cognitiveStates.anxiety >= 6 ? ['music_therapy', 'breathing_exercise', 'emergency_contact'] : ['continue_monitoring']\n    },\n    data_quality: {\n      signal_strength: input.signal_quality || 0.85,\n      noise_level: input.noise_level || 0.15\n    }\n  }\n};"
      },
      "id": "eeg-processor-013",
      "name": "Process EEG Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 800]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.command_analysis.target_mode }}",
              "rightValue": "developer_mode",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "mode-router-014",
      "name": "Mode Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 600]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\nconst authMethods = ['facial_recognition', 'voice_pattern', 'passphrase'];\nconst selectedMethod = 'voice_pattern';\n\nconst authResult = {\n  method: selectedMethod,\n  success: true,\n  confidence: 0.92,\n  timestamp,\n  user_identity: 'Developer_Rishi',\n  privileges: ['full_system_access', 'camera_access', 'code_analysis', 'advanced_features']\n};\n\nconst developerCapabilities = {\n  system_access: {\n    file_system: true,\n    camera_access: true,\n    microphone_access: true,\n    network_monitoring: true,\n    process_monitoring: true\n  },\n  development_tools: {\n    code_analysis: {\n      supported_languages: ['C', 'C++', 'Python', 'JavaScript', 'Assembly'],\n      capabilities: ['debugging', 'optimization', 'review', 'refactoring', 'explanation']\n    },\n    project_assistance: {\n      architecture_design: true,\n      algorithm_optimization: true,\n      performance_analysis: true,\n      code_generation: true,\n      documentation: true\n    },\n    research_support: {\n      paper_analysis: true,\n      literature_review: true,\n      technical_writing: true,\n      innovation_brainstorming: true,\n      competitive_analysis: true\n    }\n  },\n  shravya_project_context: {\n    hardware_knowledge: 'EK-RA8D1, custom breadboard, EEG electrodes, vibration motors',\n    software_stack: 'µT-Kernel 3.0, embedded C, real-time processing',\n    project_goals: 'TRON 2025 competition, cognitive wellness monitoring',\n    technical_challenges: ['real-time EEG processing', 'low-power optimization', 'user experience'],\n    current_focus: 'AI integration, user interface, system optimization'\n  }\n};\n\nreturn {\n  json: {\n    authentication: authResult,\n    developer_mode_active: authResult.success,\n    capabilities: authResult.success ? developerCapabilities : null,\n    session_elevated: authResult.success,\n    tools_available: authResult.success ? ['camera_recognition', 'code_analyzer', 'system_control'] : [],\n    mode_switch_complete: authResult.success\n  }\n};"
      },
      "id": "dev-auth-015",
      "name": "Developer Authentication",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "={{ $credentials.elevenLabsApi.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": {
          "text": "={{ $json.output }}",
          "model_id": "eleven_multilingual_v2",
          "voice_settings": {
            "stability": 0.6,
            "similarity_boost": 0.8,
            "style": 0.3,
            "use_speaker_boost": true
          }
        },
        "options": {}
      },
      "id": "tts-engine-016",
      "name": "SHRAVYA Voice Synthesis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1320, 400]
    },
    {
      "parameters": {
        "filePath": "/tmp/shravya_speech.mp3",
        "binaryData": true,
        "options": {}
      },
      "id": "audio-writer-017",
      "name": "Write Audio File",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [1540, 400]
    },
    {
      "parameters": {
        "command": "mpg123 /tmp/shravya_speech.mp3",
        "options": {}
      },
      "id": "audio-player-018",
      "name": "Play SHRAVYA Voice",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1760, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "status": "success",
          "message": "SHRAVYA response processed",
          "response": "={{ $('SHRAVYA AI Agent Core').item.json.output }}",
          "mode": "={{ $('Initialize SHRAVYA Personality').item.json.system_state.current_mode }}",
          "timestamp": "={{ new Date().toISOString() }}",
          "session_id": "={{ $('Initialize SHRAVYA Personality').item.json.system_state.session_id }}",
          "voice_generated": true
        },
        "options": {}
      },
      "id": "voice-response-019",
      "name": "Voice Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1320, 600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "status": "success",
          "message": "EEG data processed by SHRAVYA",
          "analysis": "={{ $json }}",
          "shravya_response": "={{ $('SHRAVYA AI Agent Core').item.json.output }}",
          "timestamp": "={{ new Date().toISOString() }}",
          "session_id": "={{ $json.session_id }}",
          "intervention_needed": "={{ $json.wellness_assessment.intervention_needed }}"
        },
        "options": {}
      },
      "id": "eeg-response-020",
      "name": "EEG Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1320, 800]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all()[0].json;\nconst action = input.action;\nconst timestamp = new Date().toISOString();\n\nlet response = {\n  tool: 'eeg_monitor',\n  action: action,\n  timestamp: timestamp\n};\n\nswitch (action) {\n  case 'start_monitoring':\n    response.status = 'monitoring_started';\n    response.message = `EEG monitoring session started for ${input.duration_minutes || 10} minutes`;\n    response.session_id = `eeg_${Date.now()}`;\n    response.analysis_focus = input.analysis_type || 'general';\n    break;\n    \n  case 'analyze_current':\n    response.status = 'analysis_complete';\n    response.message = 'Current cognitive state analysis completed';\n    response.results = {\n      focus: Math.random() * 10,\n      stress: Math.random() * 10,\n      anxiety: Math.random() * 10,\n      overall_wellness: Math.random() * 10\n    };\n    break;\n    \n  case 'stop_monitoring':\n    response.status = 'monitoring_stopped';\n    response.message = 'EEG monitoring session ended';\n    response.report_generated = true;\n    break;\n    \n  case 'get_status':\n    response.status = 'active';\n    response.message = 'EEG monitoring system is operational';\n    response.device_connected = true;\n    response.signal_quality = 'good';\n    break;\n    \n  default:\n    response.status = 'error';\n    response.message = `Unknown action: ${action}`;\n}\n\nreturn { json: response };"
      },
      "id": "tool-eeg-impl-021",
      "name": "EEG Monitor Implementation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all()[0].json;\nconst musicType = input.music_type;\nconst duration = input.duration_minutes || 5;\nconst volume = input.volume || 70;\nconst timestamp = new Date().toISOString();\n\nconst musicLibrary = {\n  calm: ['Peaceful_Piano.mp3', 'Ocean_Waves.mp3', 'Gentle_Rain.mp3'],\n  focus: ['Focus_Beats.mp3', 'White_Noise.mp3', 'Instrumental_Focus.mp3'],\n  meditation: ['Tibetan_Bowls.mp3', 'Meditation_Bells.mp3', 'Deep_Meditation.mp3'],\n  nature_sounds: ['Forest_Ambience.mp3', 'Bird_Songs.mp3', 'Waterfall.mp3'],\n  binaural_beats: ['Alpha_Waves.mp3', 'Theta_Meditation.mp3', 'Focus_40Hz.mp3']\n};\n\nconst selectedTrack = musicLibrary[musicType] ? musicLibrary[musicType][0] : 'Default_Calm.mp3';\n\nreturn {\n  json: {\n    tool: 'play_music',\n    status: 'playing',\n    message: `Playing ${musicType} music for ${duration} minutes`,\n    track: selectedTrack,\n    duration_minutes: duration,\n    volume: volume,\n    music_type: musicType,\n    timestamp: timestamp,\n    playlist: musicLibrary[musicType] || ['Default_Calm.mp3']\n  }\n};"
      },
      "id": "tool-music-impl-022",
      "name": "Music Player Implementation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 580]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all()[0].json;\nconst urgencyLevel = input.urgency_level;\nconst contactType = input.contact_type;\nconst messageType = input.message_type || 'check_in';\nconst includeData = input.include_data || false;\nconst timestamp = new Date().toISOString();\n\nconst emergencyContacts = {\n  family: {\n    name: 'Emergency Family Contact',\n    phone: '+1234567890',\n    email: 'family@example.com',\n    telegram: 'family_chat_id'\n  },\n  friend: {\n    name: 'Support Friend',\n    phone: '+0987654321',\n    email: 'friend@example.com',\n    telegram: 'friend_chat_id'\n  },\n  therapist: {\n    name: 'Mental Health Professional',\n    phone: '+1122334455',\n    email: 'therapist@example.com',\n    telegram: 'therapist_chat_id'\n  },\n  emergency_services: {\n    name: 'Emergency Services',\n    phone: '911',\n    email: 'emergency@local.gov',\n    telegram: null\n  }\n};\n\nconst contact = emergencyContacts[contactType];\nconst responseTime = urgencyLevel === 'critical' ? '1 minute' : urgencyLevel === 'high' ? '5 minutes' : '15 minutes';\n\nlet alertMessage = '';\nswitch (messageType) {\n  case 'emergency':\n    alertMessage = `🚨 EMERGENCY: User needs immediate assistance. Urgency: ${urgencyLevel.toUpperCase()}`;\n    break;\n  case 'support_needed':\n    alertMessage = `💙 SUPPORT REQUEST: User is experiencing ${urgencyLevel} stress/anxiety and could use support`;\n    break;\n  case 'check_in':\n    alertMessage = `💭 CHECK-IN: User's wellness system detected elevated stress levels and suggests a friendly check-in`;\n    break;\n}\n\nreturn {\n  json: {\n    tool: 'emergency_contact',\n    status: 'contact_initiated',\n    message: `Emergency contact initiated for ${contactType}`,\n    contact: contact,\n    urgency_level: urgencyLevel,\n    message_type: messageType,\n    alert_message: alertMessage,\n    expected_response_time: responseTime,\n    timestamp: timestamp,\n    wellness_data_included: includeData,\n    notification_sent: true\n  }\n};"
      },
      "id": "tool-emergency-impl-023",
      "name": "Emergency Contact Implementation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 660]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all()[0].json;\nconst action = input.action;\nconst saveImage = input.save_image || false;\nconst confidence = input.recognition_confidence || 0.8;\nconst timestamp = new Date().toISOString();\n\nlet response = {\n  tool: 'camera_recognition',\n  action: action,\n  timestamp: timestamp\n};\n\nswitch (action) {\n  case 'identify_user':\n    response.status = 'user_identified';\n    response.message = 'User successfully identified through facial recognition';\n    response.user_identity = 'Developer_Rishi';\n    response.confidence_score = 0.94;\n    response.recognition_time_ms = 850;\n    response.authenticated = true;\n    break;\n    \n  case 'capture_image':\n    response.status = 'image_captured';\n    response.message = 'Image captured successfully';\n    response.image_path = saveImage ? `/tmp/camera_capture_${Date.now()}.jpg` : null;\n    response.image_quality = 'high';\n    response.resolution = '1920x1080';\n    break;\n    \n  case 'continuous_recognition':\n    response.status = 'continuous_active';\n    response.message = 'Continuous facial recognition activated';\n    response.monitoring = true;\n    response.update_interval = '5 seconds';\n    break;\n    \n  case 'emotion_detection':\n    response.status = 'emotions_detected';\n    response.message = 'Emotional state analysis completed';\n    response.emotions = {\n      happiness: 0.7,\n      stress: 0.3,\n      focus: 0.8,\n      fatigue: 0.2\n    };\n    response.dominant_emotion = 'focused';\n    break;\n    \n  default:\n    response.status = 'error';\n    response.message = `Unknown camera action: ${action}`;\n}\n\nreturn { json: response };"
      },
      "id": "tool-camera-impl-024",
      "name": "Camera Recognition Implementation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 740]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all()[0].json;\nconst analysisType = input.analysis_type;\nconst codeLanguage = input.code_language || 'unknown';\nconst codeContent = input.code_content || '';\nconst specificIssue = input.specific_issue || '';\nconst timestamp = new Date().toISOString();\n\nlet analysisResult = {\n  tool: 'code_analyzer',\n  analysis_type: analysisType,\n  code_language: codeLanguage,\n  timestamp: timestamp\n};\n\nswitch (analysisType) {\n  case 'debug':\n    analysisResult.status = 'debug_complete';\n    analysisResult.message = 'Code debugging analysis completed';\n    analysisResult.issues_found = [\n      { line: 23, severity: 'error', description: 'Potential null pointer dereference' },\n      { line: 45, severity: 'warning', description: 'Variable declared but not used' }\n    ];\n    analysisResult.suggestions = [\n      'Add null check before pointer access',\n      'Remove unused variable or implement functionality'\n    ];\n    break;\n    \n  case 'optimize':\n    analysisResult.status = 'optimization_complete';\n    analysisResult.message = 'Code optimization suggestions generated';\n    analysisResult.optimizations = [\n      { type: 'performance', description: 'Loop can be vectorized for better performance' },\n      { type: 'memory', description: 'Consider using stack allocation instead of heap' }\n    ];\n    analysisResult.estimated_improvement = '25% faster execution';\n    break;\n    \n  case 'review':\n    analysisResult.status = 'review_complete';\n    analysisResult.message = 'Code review completed';\n    analysisResult.score = 8.5;\n    analysisResult.strengths = ['Good variable naming', 'Proper error handling'];\n    analysisResult.improvements = ['Add more comments', 'Consider breaking down large functions'];\n    break;\n    \n  case 'explain':\n    analysisResult.status = 'explanation_complete';\n    analysisResult.message = 'Code explanation generated';\n    analysisResult.explanation = 'This code implements a real-time EEG signal processing algorithm using digital filters and machine learning classification for cognitive state detection.';\n    analysisResult.key_concepts = ['Digital Signal Processing', 'Machine Learning', 'Real-time Systems'];\n    break;\n    \n  case 'refactor':\n    analysisResult.status = 'refactor_complete';\n    analysisResult.message = 'Code refactoring suggestions provided';\n    analysisResult.refactor_suggestions = [\n      'Extract common functionality into separate functions',\n      'Use more descriptive variable names',\n      'Implement error handling patterns'\n    ];\n    break;\n    \n  default:\n    analysisResult.status = 'error';\n    analysisResult.message = `Unknown analysis type: ${analysisType}`;\n}\n\nanalysisResult.code_metrics = {\n  lines_of_code: codeContent.split('\\n').length,\n  complexity_score: 'medium',\n  maintainability_index: 7.8\n};\n\nreturn { json: analysisResult };"
      },
      "id": "tool-code-impl-025",
      "name": "Code Analyzer Implementation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 820]
    }
  ],
  "connections": {
    "SHRAVYA Activation": {
      "main": [[
        { "node": "Initialize SHRAVYA Personality", "type": "main", "index": 0 }
      ]]
    },
    "Initialize SHRAVYA Personality": {
      "main": [[
        { "node": "SHRAVYA Memory Manager", "type": "main", "index": 0 }
      ]]
    },
    "SHRAVYA Memory Manager": {
      "main": [[
        { "node": "SHRAVYA AI Agent Core", "type": "main", "index": 0 }
      ]]
    },
    "Voice Command Listener": {
      "main": [[
        { "node": "Process Voice Commands", "type": "main", "index": 0 }
      ]]
    },
    "EEG Data Listener": {
      "main": [[
        { "node": "Process EEG Data", "type": "main", "index": 0 }
      ]]
    },
    "Process Voice Commands": {
      "main": [[
        { "node": "Mode Router", "type": "main", "index": 0 }
      ]]
    },
    "Process EEG Data": {
      "main": [[
        { "node": "SHRAVYA AI Agent Core", "type": "main", "index": 0 }
      ]]
    },
    "Mode Router": {
      "main": [
        [
          { "node": "Developer Authentication", "type": "main", "index": 0 }
        ],
        [
          { "node": "SHRAVYA AI Agent Core", "type": "main", "index": 0 }
        ]
      ]
    },
    "Developer Authentication": {
      "main": [[
        { "node": "SHRAVYA AI Agent Core", "type": "main", "index": 0 }
      ]]
    },
    "SHRAVYA AI Agent Core": {
      "main": [[
        { "node": "SHRAVYA Voice Synthesis", "type": "main", "index": 0 }
      ]]
    },
    "SHRAVYA Voice Synthesis": {
      "main": [[
        { "node": "Write Audio File", "type": "main", "index": 0 }
      ]]
    },
    "Write Audio File": {
      "main": [[
        { "node": "Play SHRAVYA Voice", "type": "main", "index": 0 }
      ]]
    },
    "EEG Monitor Tool": {
      "main": [[
        { "node": "EEG Monitor Implementation", "type": "main", "index": 0 }
      ]]
    },
    "Music Player Tool": {
      "main": [[
        { "node": "Music Player Implementation", "type": "main", "index": 0 }
      ]]
    },
    "Emergency Contact Tool": {
      "main": [[
        { "node": "Emergency Contact Implementation", "type": "main", "index": 0 }
      ]]
    },
    "Camera Recognition Tool": {
      "main": [[
        { "node": "Camera Recognition Implementation", "type": "main", "index": 0 }
      ]]
    },
    "Code Analyzer Tool": {
      "main": [[
        { "node": "Code Analyzer Implementation", "type": "main", "index": 0 }
      ]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-24T18:47:00.000Z",
      "updatedAt": "2025-08-24T18:47:00.000Z",
      "id": "shravya-ai-companion",
      "name": "SHRAVYA AI Companion"
    }
  ],
  "triggerCount": 1,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}