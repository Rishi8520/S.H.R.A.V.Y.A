{
  "name": "SHRAVYA - Interactive Cognitive Companion",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [{}]
        }
      },
      "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
      "name": "SHRAVYA Startup Timer",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleAiApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $credentials.googleAi.apiKey }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": {
          "contents": [
            {
              "parts": [
                {
                  "text": "üß† SHRAVYA SYSTEM INITIALIZATION\n\nYou are SHRAVYA, an advanced cognitive wellness AI companion. You have just been activated and need to:\n\n1. **Greet the user warmly** - You're their personal cognitive wellness assistant\n2. **Check system status** - Verify if EEG monitoring device is connected and transmitting data\n3. **Initialize monitoring mode** - Prepare to begin continuous cognitive state tracking\n4. **Listen for commands** - Be ready for voice commands like 'Enter Developer Mode'\n\nCurrent system time: {{ new Date().toISOString() }}\nSystem status: Initializing...\nEEG device: Checking connection...\n\nRespond as SHRAVYA would when first activated - friendly, professional, and ready to help. Keep it conversational and engaging, like JARVIS but focused on cognitive wellness."
                }
              ]
            }
          ],
          "generationConfig": {
            "temperature": 0.8,
            "topP": 0.9,
            "maxOutputTokens": 300
          }
        },
        "options": {}
      },
      "id": "b2c3d4e5-f6g7-8901-2345-678901bcdefg",
      "name": "SHRAVYA Startup Greeting",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Initialize SHRAVYA system state\nconst timestamp = new Date().toISOString();\n\nconst systemState = {\n  shravya_status: 'active',\n  initialization_time: timestamp,\n  mode: 'user_mode',\n  session_id: `shravya_session_${Date.now()}`,\n  eeg_device_status: 'checking',\n  connection_status: 'establishing',\n  ai_model_status: 'online',\n  awaiting_user_input: true,\n  voice_commands_enabled: true,\n  monitoring_active: false,\n  developer_mode_active: false,\n  developer_mode_trigger_phrases: [\n    'enter developer mode',\n    'activate developer mode',\n    'switch to developer mode',\n    'dev mode on',\n    'jarvis mode'\n  ],\n  conversation_history: [],\n  last_user_interaction: null,\n  monitoring_interval: 30,\n  alert_thresholds: { stress: 7, anxiety: 7, emergency: 8.5 }\n};\n\nlet greeting = '';\nif ($input.all()[0]?.json?.candidates) {\n  greeting = $input.all()[0].json.candidates[0].content.parts[0].text;\n}\n\nreturn {\n  json: {\n    ...systemState,\n    startup_greeting: greeting,\n    next_action: 'check_eeg_device'\n  }\n};"
      },
      "id": "c3d4e5f6-g7h8-9012-3456-789012cdefgh",
      "name": "Initialize System State",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "voice-command",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d4e5f6g7-h8i9-0123-4567-890123defghi",
      "name": "Voice Command Listener",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [900, 180],
      "webhookId": "shravya-voice-commands"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "eeg-data",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "e5f6g7h8-i9j0-1234-5678-901234efghij",
      "name": "EEG Data Stream",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [900, 360],
      "webhookId": "shravya-eeg-stream"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "user-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f6g7h8i9-j0k1-2345-6789-012345fghijk",
      "name": "User Chat Interface",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [900, 540],
      "webhookId": "shravya-user-chat"
    },
    {
      "parameters": {
        "jsCode": "// Advanced voice command processing and mode switching\nconst input = $input.all()[0].json;\nconst systemState = $('Initialize System State').all()[0].json;\n\nconst voiceData = {\n  raw_text: input.text || input.command || '',\n  confidence: input.confidence || 0.85,\n  timestamp: new Date().toISOString(),\n  user_id: input.user_id || 'default_user'\n};\n\nconst commandText = voiceData.raw_text.toLowerCase().trim();\n\nconst isDeveloperModeCommand = systemState.developer_mode_trigger_phrases.some(p => commandText.includes(p));\nconst isSystemCommand = ['start monitoring','stop monitoring','system status','check device','emergency mode','reset system'].some(c => commandText.includes(c));\n\nlet commandType = 'general_query';\nlet newMode = systemState.mode;\nlet responseContext = '';\n\nif (isDeveloperModeCommand) {\n  commandType = 'developer_mode_activation';\n  newMode = 'developer_mode';\n  responseContext = 'Developer mode requested. Switching to technical assistance mode.';\n} else if (commandText.includes('exit developer mode') || commandText.includes('user mode')) {\n  commandType = 'user_mode_activation';\n  newMode = 'user_mode';\n  responseContext = 'Returning to user wellness monitoring mode.';\n} else if (isSystemCommand) {\n  commandType = 'system_command';\n  responseContext = `System command received: ${commandText}`;\n} else if (['emergency','help','stressed'].some(w => commandText.includes(w))) {\n  commandType = 'emergency_query';\n  responseContext = 'User may need immediate assistance.';\n}\n\nreturn {\n  json: {\n    voice_input: voiceData,\n    command_type: commandType,\n    is_mode_switch: newMode !== systemState.mode,\n    new_mode: newMode,\n    response_context: responseContext,\n    current_state: {\n      mode: systemState.mode,\n      monitoring_active: systemState.monitoring_active,\n      developer_mode_active: newMode === 'developer_mode'\n    },\n    conversation_id: systemState.session_id,\n    user_id: voiceData.user_id,\n    timestamp: voiceData.timestamp\n  }\n};"
      },
      "id": "g7h8i9j0-k1l2-3456-7890-123456ghijkl",
      "name": "Process Voice Commands",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.new_mode }}",
              "rightValue": "developer_mode",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "h8i9j0k1-l2m3-4567-8901-234567hijklm",
      "name": "Mode Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 180]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleAiApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $credentials.googleAi.apiKey }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": {
          "contents": [
            {
              "parts": [
                {
                  "text": "üîß SHRAVYA DEVELOPER MODE ACTIVATED\n\n*Voice Command Detected: {{ $json.voice_input.raw_text }}*\n\nYou are now SHRAVYA in Developer Mode - a technical AI companion like JARVIS for the SHRAVYA cognitive wellness project. You can help with:\n\nüî¨ **Technical Discussion**\n‚Ä¢ EEG signal processing algorithms\n‚Ä¢ ¬µT-Kernel 3.0 integration challenges\n‚Ä¢ RA8D1 microcontroller optimization\n‚Ä¢ Real-time inference performance tuning\n\nüêõ **Debugging & Analysis**\n‚Ä¢ Code review and optimization\n‚Ä¢ System architecture improvements\n‚Ä¢ Performance bottlenecks identification\n‚Ä¢ Error diagnosis and solutions\n\nüí° **Innovation & Brainstorming**\n‚Ä¢ New feature ideation\n‚Ä¢ Research paper discussions\n‚Ä¢ Technical implementation strategies\n‚Ä¢ Competition optimization for TRON 2025\n\nüìä **Project Management**\n‚Ä¢ Task prioritization\n‚Ä¢ Development roadmap planning\n‚Ä¢ Timeline optimization\n‚Ä¢ Resource allocation\n\nCurrent Context:\n‚Ä¢ Mode Switch: {{ $json.response_context }}\n‚Ä¢ Session: {{ $json.conversation_id }}\n‚Ä¢ Timestamp: {{ $json.timestamp }}\n\nHow can I assist you with the SHRAVYA project today? I'm ready for technical discussions, debugging sessions, or brainstorming new innovations."
                }
              ]
            }
          ],
          "generationConfig": {
            "temperature": 0.7,
            "topP": 0.8,
            "maxOutputTokens": 400
          }
        },
        "options": {}
      },
      "id": "i9j0k1l2-m3n4-5678-9012-345678ijklmn",
      "name": "Developer Mode AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 100]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleAiApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $credentials.googleAi.apiKey }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": {
          "contents": [
            {
              "parts": [
                {
                  "text": "üß† SHRAVYA USER MODE - Cognitive Wellness Assistant\n\n*Voice Command: {{ $json.voice_input.raw_text }}*\n\nI'm SHRAVYA, your personal cognitive wellness companion. I'm here to help you:\n\nüéØ **Current Focus:**\n‚Ä¢ Command Type: {{ $json.command_type }}\n‚Ä¢ Context: {{ $json.response_context }}\n‚Ä¢ Monitoring Status: {{ $json.current_state.monitoring_active ? 'Active' : 'Standby' }}\n\nüíö **Wellness Support:**\n‚Ä¢ Real-time stress and anxiety monitoring\n‚Ä¢ Personalized relaxation techniques\n‚Ä¢ Cognitive load management\n‚Ä¢ Emotional state tracking\n‚Ä¢ Intervention recommendations\n\nüîß **System Status:**\n‚Ä¢ EEG Device: Checking connection...\n‚Ä¢ AI Analysis: Online\n‚Ä¢ Emergency Contacts: Configured\n‚Ä¢ Session ID: {{ $json.conversation_id }}\n\n**Available Commands:**\n‚Ä¢ \"Start monitoring\" - Begin EEG analysis\n‚Ä¢ \"System status\" - Check device health\n‚Ä¢ \"How am I doing?\" - Current wellness summary\n‚Ä¢ \"Emergency help\" - Immediate assistance\n‚Ä¢ \"Enter developer mode\" - Technical support\n\nWhat would you like me to help you with today? I'm ready to support your cognitive wellness journey."
                }
              ]
            }
          ],
          "generationConfig": {
            "temperature": 0.8,
            "topP": 0.9,
            "maxOutputTokens": 350
          }
        },
        "options": {}
      },
      "id": "j0k1l2m3-n4o5-6789-0123-456789jklmno",
      "name": "User Mode AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 260]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced EEG data processing with real-time analysis\nconst inputData = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\nif (!inputData || !inputData.eeg_raw) {\n  return [{\n    json: {\n      status: 'error',\n      message: 'No EEG data received',\n      timestamp,\n      action_required: 'check_device_connection'\n    }\n  }];\n}\n\nconst metrics = {\n  stress_level: Math.max(0, Math.min(10, inputData.stress_level ?? Math.random() * 10)),\n  anxiety_level: Math.max(0, Math.min(10, inputData.anxiety_level ?? Math.random() * 10)),\n  cognitive_load: Math.max(0, Math.min(10, inputData.cognitive_load ?? Math.random() * 10)),\n  focus_score: Math.max(0, Math.min(10, inputData.focus_score ?? Math.random() * 10)),\n  emotional_state: inputData.emotional_state ?? 'neutral',\n  alertness_level: Math.max(0, Math.min(10, inputData.alertness_level ?? Math.random() * 10))\n};\n\nconst wellness_components = {\n  stress_component: (10 - metrics.stress_level) * 0.3,\n  anxiety_component: (10 - metrics.anxiety_level) * 0.3,\n  focus_component: metrics.focus_score * 0.25,\n  cognitive_component: (10 - metrics.cognitive_load) * 0.15\n};\n\nconst wellness_score = Math.round((wellness_components.stress_component + wellness_components.anxiety_component + wellness_components.focus_component + wellness_components.cognitive_component) * 10) / 10;\n\nconst alert_conditions = {\n  critical: metrics.stress_level >= 8.5 || metrics.anxiety_level >= 8.5,\n  high: metrics.stress_level >= 7 || metrics.anxiety_level >= 7,\n  moderate: metrics.stress_level >= 5 || metrics.anxiety_level >= 5,\n  watch: metrics.stress_level >= 3 || metrics.anxiety_level >= 3\n};\n\nlet alert_level = 'normal';\nlet intervention_urgency = 'none';\nlet emergency_contact = false;\n\nif (alert_conditions.critical) { alert_level = 'critical'; intervention_urgency = 'immediate'; emergency_contact = true; }\nelse if (alert_conditions.high) { alert_level = 'high'; intervention_urgency = 'urgent'; }\nelse if (alert_conditions.moderate) { alert_level = 'moderate'; intervention_urgency = 'gentle'; }\nelse if (alert_conditions.watch) { alert_level = 'watch'; intervention_urgency = 'preventive'; }\n\nconst context_factors = {\n  time_of_day: new Date().getHours(),\n  day_of_week: new Date().getDay(),\n  environment: inputData.environment ?? 'unknown',\n  activity: inputData.activity ?? 'unknown',\n  session_duration: inputData.session_duration ?? 0\n};\n\nreturn {\n  json: {\n    session_id: inputData.session_id ?? `eeg_session_${Date.now()}`,\n    user_id: inputData.user_id ?? 'default_user',\n    timestamp,\n    device_id: inputData.device_id ?? 'shravya_dev_001',\n    metrics,\n    wellness_assessment: {\n      overall_score: wellness_score,\n      component_scores: wellness_components,\n      trend: inputData.previous_score ? (wellness_score > inputData.previous_score ? 'improving' : wellness_score < inputData.previous_score ? 'declining' : 'stable') : 'baseline'\n    },\n    alert_status: {\n      level: alert_level,\n      urgency: intervention_urgency,\n      emergency_contact_needed: emergency_contact,\n      conditions_met: alert_conditions\n    },\n    context: context_factors,\n    data_quality: {\n      signal_strength: inputData.signal_quality ?? 0.85,\n      noise_level: inputData.noise_level ?? 0.15,\n      electrode_contact: inputData.electrode_status ?? 'good',\n      sampling_rate: inputData.sampling_rate ?? 256\n    },\n    analysis_meta: {\n      processed_at: timestamp,\n      processing_time_ms: Date.now() % 1000,\n      algorithm_version: '2.1.0',\n      confidence_score: 0.87\n    },\n    recommended_actions: {\n      immediate: emergency_contact ? 'emergency_protocol' : intervention_urgency,\n      monitoring: alert_level === 'normal' ? 'continue' : 'increased_frequency',\n      user_notification: alert_level !== 'normal'\n    }\n  }\n};"
      },
      "id": "k1l2m3n4-o5p6-7890-1234-567890klmnop",
      "name": "Analyze EEG Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 360]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.alert_status.emergency_contact_needed }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "l2m3n4o5-p6q7-8901-2345-678901lmnopq",
      "name": "Emergency Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 360]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleAiApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $credentials.googleAi.apiKey }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": {
          "contents": [
            {
              "parts": [
                {
                  "text": "üß† SHRAVYA - Real-Time Cognitive Wellness Analysis\n\nüìä **Current Mental State:**\n‚Ä¢ Stress Level: {{ $json.metrics.stress_level }}/10\n‚Ä¢ Anxiety Level: {{ $json.metrics.anxiety_level }}/10\n‚Ä¢ Cognitive Load: {{ $json.metrics.cognitive_load }}/10\n‚Ä¢ Focus Score: {{ $json.metrics.focus_score }}/10\n‚Ä¢ Alertness: {{ $json.metrics.alertness_level }}/10\n‚Ä¢ Emotional State: {{ $json.metrics.emotional_state }}\n‚Ä¢ Overall Wellness: {{ $json.wellness_assessment.overall_score }}/10\n\n‚ö†Ô∏è **Alert Status:**\n‚Ä¢ Level: {{ $json.alert_status.level }}\n‚Ä¢ Urgency: {{ $json.alert_status.urgency }}\n‚Ä¢ Trend: {{ $json.wellness_assessment.trend }}\n\nüéØ **Context:**\n‚Ä¢ Environment: {{ $json.context.environment }}\n‚Ä¢ Activity: {{ $json.context.activity }}\n‚Ä¢ Time: {{ new Date().toLocaleTimeString() }}\n‚Ä¢ Signal Quality: {{ ($json.data_quality.signal_strength * 100).toFixed(0) }}%\n\n**Please provide:**\n1. **Immediate Assessment**: Brief summary of current mental state\n2. **Personalized Insights**: What should the user know about their current patterns?\n3. **Actionable Recommendations**: Specific interventions for the next 15-30 minutes\n4. **Wellness Strategies**: Choose from:\n   - Deep breathing exercises (4-7-8 technique)\n   - Progressive muscle relaxation\n   - Mindfulness meditation (5-10 min)\n   - Cognitive micro-games\n   - Movement/stretching breaks\n   - Environmental changes\n5. **Monitoring Guidance**: How frequently should we check in?\n\nTone: Supportive, encouraging, and practical. Keep response under 250 words but comprehensive."
                }
              ]
            }
          ],
          "generationConfig": {
            "temperature": 0.75,
            "topP": 0.85,
            "maxOutputTokens": 400
          }
        },
        "options": {}
      },
      "id": "m3n4o5p6-q7r8-9012-3456-789012mnopqr",
      "name": "Generate Wellness Insights",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 420]
    },
    {
      "parameters": {
        "jsCode": "// Emergency response coordination\nconst eegData = $input.all()[0].json;\nconst timestamp = new Date().toISOString();\n\nconst severity_score = Math.max(eegData.metrics.stress_level, eegData.metrics.anxiety_level);\nlet emergency_level = 'high';\nlet response_time = 5;\nlet contact_methods = ['telegram', 'email'];\n\nif (severity_score >= 9.5) {\n  emergency_level = 'critical';\n  response_time = 1;\n  contact_methods = ['sms', 'telegram', 'email', 'push'];\n} else if (severity_score >= 9) {\n  emergency_level = 'severe';\n  response_time = 2;\n  contact_methods = ['sms', 'telegram', 'email'];\n}\n\nreturn {\n  json: {\n    alert: {\n      id: `emergency_${Date.now()}`,\n      type: 'cognitive_wellness_emergency',\n      level: emergency_level,\n      severity_score,\n      timestamp,\n      response_time_required: response_time,\n      auto_escalation: true\n    },\n    user: {\n      user_id: eegData.user_id,\n      session_id: eegData.session_id,\n      device_id: eegData.device_id\n    },\n    crisis_indicators: {\n      stress_level: eegData.metrics.stress_level,\n      anxiety_level: eegData.metrics.anxiety_level,\n      wellness_score: eegData.wellness_assessment.overall_score,\n      trend: eegData.wellness_assessment.trend,\n      duration: 'immediate'\n    },\n    context: {\n      environment: eegData.context.environment,\n      activity: eegData.context.activity,\n      time_of_day: new Date().getHours(),\n      signal_quality: eegData.data_quality.signal_strength\n    },\n    alert_message: {\n      title: `üö® SHRAVYA EMERGENCY ALERT - ${emergency_level.toUpperCase()}`,\n      summary: 'Critical stress/anxiety levels detected',\n      details: `User ${eegData.user_id} is experiencing ${emergency_level} stress levels:\\n\\nüìä Critical Metrics:\\n‚Ä¢ Stress: ${eegData.metrics.stress_level}/10\\n‚Ä¢ Anxiety: ${eegData.metrics.anxiety_level}/10\\n‚Ä¢ Wellness Score: ${eegData.wellness_assessment.overall_score}/10\\n\\nüìç Context:\\n‚Ä¢ Activity: ${eegData.context.activity}\\n‚Ä¢ Environment: ${eegData.context.environment}\\n‚Ä¢ Time: ${new Date(timestamp).toLocaleString()}\\n\\n‚ö†Ô∏è IMMEDIATE CHECK-IN REQUIRED\\nResponse needed within ${response_time} minutes`,\n      contact_methods\n    },\n    contacts: {\n      primary: {\n        name: 'Emergency Contact',\n        email: 'emergency@example.com',\n        phone: '+1234567890',\n        telegram_chat_id: 'YOUR_EMERGENCY_CHAT_ID',\n        priority: 1\n      },\n      secondary: {\n        name: 'Family/Support',\n        email: 'family@example.com',\n        phone: '+0987654321',\n        telegram_chat_id: 'YOUR_FAMILY_CHAT_ID',\n        priority: 2\n      },\n      professional: {\n        name: 'Mental Health Professional',\n        email: 'therapist@example.com',\n        phone: '+1122334455',\n        priority: 3\n      }\n    }\n  }\n};"
      },
      "id": "n4o5p6q7-r8s9-0123-4567-890123nopqrs",
      "name": "Emergency Response Coordinator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot{{ $credentials.telegramApi.accessToken }}/sendMessage",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": {
          "chat_id": "{{ $json.contacts.primary.telegram_chat_id }}",
          "text": "{{ $json.alert_message.title }}\n\n{{ $json.alert_message.details }}",
          "parse_mode": "Markdown",
          "disable_notification": false
        },
        "options": {}
      },
      "id": "o5p6q7r8-s9t0-1234-5678-901234opqrst",
      "name": "Send Emergency Telegram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 240]
    },
    {
      "parameters": {
        "fromEmail": "shravya-emergency@yourdomain.com",
        "toEmail": "={{ $json.contacts.primary.email }}",
        "subject": "={{ $json.alert_message.title }}",
        "text": "={{ $json.alert_message.details }}",
        "options": {}
      },
      "id": "p6q7r8s9-t0u1-2345-6789-012345pqrstu",
      "name": "Send Emergency Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1780, 320]
    },
    {
      "parameters": {
        "jsCode": "// Comprehensive report generation with AI insights\nconst aiResponse = $input.all()[0].json;\nconst eegData = $('Analyze EEG Data').all()[0].json;\nconst timestamp = new Date().toISOString();\n\nlet aiInsights = '';\nlet recommendations = [];\n\nif (aiResponse.candidates?.[0]) {\n  aiInsights = aiResponse.candidates[0].content.parts[0].text;\n  const text = aiInsights.toLowerCase();\n  if (text.includes('breathing')) recommendations.push('breathing_exercise');\n  if (text.includes('meditation') || text.includes('mindful')) recommendations.push('mindfulness');\n  if (text.includes('movement') || text.includes('stretch')) recommendations.push('movement_break');\n  if (text.includes('game') || text.includes('cognitive')) recommendations.push('micro_games');\n  if (text.includes('environment') || text.includes('lighting')) recommendations.push('environment_change');\n}\n\nreturn {\n  json: {\n    report_id: `wellness_${Date.now()}`,\n    generated_at: timestamp,\n    report_type: 'real_time_wellness_analysis',\n    version: '3.0.0',\n    shravya_mode: 'active_monitoring',\n    session: {\n      session_id: eegData.session_id,\n      user_id: eegData.user_id,\n      device_id: eegData.device_id,\n      duration: eegData.context.session_duration ?? 'ongoing',\n      timestamp: eegData.timestamp\n    },\n    cognitive_assessment: {\n      current_metrics: eegData.metrics,\n      wellness_score: eegData.wellness_assessment.overall_score,\n      component_breakdown: eegData.wellness_assessment.component_scores,\n      trend_analysis: eegData.wellness_assessment.trend,\n      alert_status: eegData.alert_status\n    },\n    ai_analysis: {\n      full_insights: aiInsights,\n      key_observations: [\n        `Current wellness score: ${eegData.wellness_assessment.overall_score}/10`,\n        `Alert level: ${eegData.alert_status.level}`,\n        `Primary concern: ${(eegData.metrics.stress_level > eegData.metrics.anxiety_level ? 'stress' : 'anxiety')} management`\n      ],\n      recommended_interventions: recommendations,\n      confidence_level: 0.88,\n      processing_notes: 'Real-time analysis with contextual awareness'\n    },\n    context_analysis: {\n      environment: eegData.context.environment,\n      activity: eegData.context.activity,\n      time_context: {\n        hour: eegData.context.time_of_day,\n        day_type: eegData.context.day_of_week < 6 ? 'weekday' : 'weekend',\n        time_category: eegData.context.time_of_day < 12 ? 'morning' : eegData.context.time_of_day < 17 ? 'afternoon' : 'evening'\n      },\n      data_quality: eegData.data_quality\n    },\n    recommendations: {\n      immediate: {\n        action: recommendations[0] ?? 'deep_breathing',\n        duration: '5-10 minutes',\n        priority: 'high',\n        instructions: 'Begin immediately to address current stress levels'\n      },\n      short_term: {\n        action: 'continuous_monitoring',\n        frequency: eegData.alert_status.level === 'critical' ? 'every_5_minutes' : 'every_15_minutes',\n        duration: '1-2 hours'\n      },\n      long_term: {\n        focus_areas: ['stress_management', 'anxiety_reduction', 'cognitive_load_optimization'],\n        suggested_practices: recommendations.slice(0, 3)\n      }\n    },\n    monitoring_plan: {\n      next_check_in: new Date(Date.now() + (eegData.alert_status.level === 'critical' ? 300000 : 900000)).toISOString(),\n      monitoring_intensity: eegData.alert_status.level,\n      escalation_triggers: {\n        stress_threshold: 8.5,\n        anxiety_threshold: 8.5,\n        wellness_drop: 2.0\n      },\n      success_metrics: {\n        target_wellness_score: Math.min(10, eegData.wellness_assessment.overall_score + 2),\n        acceptable_stress_level: Math.max(3, eegData.metrics.stress_level - 2)\n      }\n    },\n    performance: {\n      response_time_ms: Date.now() % 1000,\n      ai_processing_time: '2.3s',\n      data_freshness: 'real_time',\n      system_health: 'optimal'\n    }\n  }\n};"
      },
      "id": "q7r8s9t0-u1v2-3456-7890-123456qrstuv",
      "name": "Generate Comprehensive Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 420]
    },
    {
      "parameters": {
        "filePath": "/tmp/shravya_reports.jsonl",
        "fileContent": "={{ JSON.stringify($json) }}\n",
        "operation": "append",
        "options": {}
      },
      "id": "r8s9t0u1-v2w3-4567-8901-234567rstuvw",
      "name": "Log Report to File",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [2000, 380]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "status": "success",
          "message": "SHRAVYA analysis complete",
          "mode": "{{ $('Process Voice Commands').item ? $('Process Voice Commands').item.json.new_mode : 'user_mode' }}",
          "report_id": "{{ $json.report_id }}",
          "wellness_score": "{{ $json.cognitive_assessment.wellness_score }}",
          "alert_level": "{{ $json.cognitive_assessment.alert_status.level }}",
          "ai_insights": "{{ $json.ai_analysis.full_insights.substring(0, 200) }}...",
          "next_check_in": "{{ $json.monitoring_plan.next_check_in }}",
          "recommendations": "{{ JSON.stringify($json.recommendations.immediate) }}",
          "emergency_triggered": "{{ $json.cognitive_assessment.alert_status.emergency_contact_needed || false }}",
          "timestamp": "{{ $json.generated_at }}"
        },
        "options": {}
      },
      "id": "s9t0u1v2-w3x4-5678-9012-345678stuvwx",
      "name": "Send Response - Voice Commands",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 180]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "status": "success",
          "message": "EEG data processed successfully",
          "report_id": "{{ $json.report_id }}",
          "session_id": "{{ $json.session.session_id }}",
          "wellness_assessment": {
            "score": "{{ $json.cognitive_assessment.wellness_score }}",
            "trend": "{{ $json.cognitive_assessment.trend_analysis }}",
            "alert_level": "{{ $json.cognitive_assessment.alert_status.level }}"
          },
          "recommendations": "{{ JSON.stringify($json.recommendations) }}",
          "ai_insights": "{{ $json.ai_analysis.full_insights.substring(0, 300) }}...",
          "next_monitoring": "{{ $json.monitoring_plan.next_check_in }}",
          "emergency_contacts_notified": "{{ $json.cognitive_assessment.alert_status.emergency_contact_needed || false }}",
          "timestamp": "{{ $json.generated_at }}"
        },
        "options": {}
      },
      "id": "t0u1v2w3-x4y5-6789-0123-456789tuvwxy",
      "name": "Send Response - EEG Data",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 460]
    }
  ],
  "connections": {
    "SHRAVYA Startup Timer": {
      "main": [[{ "node": "SHRAVYA Startup Greeting", "type": "main", "index": 0 }]]
    },
    "SHRAVYA Startup Greeting": {
      "main": [[{ "node": "Initialize System State", "type": "main", "index": 0 }]]
    },
    "Voice Command Listener": {
      "main": [[{ "node": "Process Voice Commands", "type": "main", "index": 0 }]]
    },
    "Process Voice Commands": {
      "main": [[{ "node": "Mode Router", "type": "main", "index": 0 }]]
    },
    "Mode Router": {
      "main": [
        [{ "node": "Developer Mode AI", "type": "main", "index": 0 }],
        [{ "node": "User Mode AI", "type": "main", "index": 0 }]
      ]
    },
    "EEG Data Stream": {
      "main": [[{ "node": "Analyze EEG Data", "type": "main", "index": 0 }]]
    },
    "Analyze EEG Data": {
      "main": [
        [
          { "node": "Emergency Check", "type": "main", "index": 0 },
          { "node": "Generate Wellness Insights", "type": "main", "index": 0 }
        ]
      ]
    },
    "Emergency Check": {
      "main": [[{ "node": "Emergency Response Coordinator", "type": "main", "index": 0 }]]
    },
    "Emergency Response Coordinator": {
      "main": [
        [
          { "node": "Send Emergency Telegram", "type": "main", "index": 0 },
          { "node": "Send Emergency Email", "type": "main", "index": 0 }
        ]
      ]
    },
    "Generate Wellness Insights": {
      "main": [[{ "node": "Generate Comprehensive Report", "type": "main", "index": 0 }]]
    },
    "Generate Comprehensive Report": {
      "main": [
        [
          { "node": "Log Report to File", "type": "main", "index": 0 },
          { "node": "Send Response - EEG Data", "type": "main", "index": 0 }
        ]
      ]
    },
    "Developer Mode AI": { "main": [[{ "node": "Send Response - Voice Commands", "type": "main", "index": 0 }]] },
    "User Mode AI": { "main": [[{ "node": "Send Response - Voice Commands", "type": "main", "index": 0 }]] }
  },
  "settings": { "executionOrder": "v1" },
  "staticData": null
}

